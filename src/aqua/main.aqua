aqua Main

import "@fluencelabs/aqua-lib/builtin.aqua"
import "@fluencelabs/aqua-lib/subnet.aqua"

use "deals.aqua"
use "hosts.aqua"
import "../../.fluence/aqua/services.aqua"

export test

const KUBO = "/dns4/ipfs/tcp/5001"


func workers() -> []Worker:
    results: *[]Worker
    deals <- Deals.get()
    dealId = deals.myDeployment!.dealIdOriginal
    on HOST_PEER_ID:
        subnet <- Subnet.resolve(dealId)
        if subnet.success == false:
            Console.print(["Failed to resolve subnet: ", subnet.error])
        results <<- subnet.workers

    <- results!

func test(pinataJWTKey: string) -> AMResponse:

    results: *AMResponse

    archive_cid = "bafybeiamh4td3vg25zlgcw7pybudtxbmkidsqx7lbv5zvodfa4kjsn66dq" 

    logString = (s: string):
        Console.print(s)

    for w <- workers() par:
        on w.worker_id! via w.host_id:
            r1 = CioKubo.getRecursive(KUBO, archive_cid, "test")
            folders = CioVault.inspect("test")
            for f <- folders:
                logString(f)
            results <- CioPinata.addFolder("test", pinataJWTKey)
    join results!

    if results!.result == archive_cid:
        Console.print("our test is succesful!")
        

    <- results!